from fastapi import APIRouter, Depends, HTTPException
from typing import List, Dict
from sqlalchemy.orm import Session
from app.db.firestore import get_db
from app.schema.tweet import Tweet
from app.services.twitter_service import TwitterService
from app.services.llm_service import LLMService

router = APIRouter()

@router.get('/tweets')
def get_tweets(db: Session = Depends(get_db), skip: int = 0, limit: int = 100) -> List[Tweet]:
    tweets = db.query(Tweet).offset(skip).limit(limit).all()
    return tweets

@router.get('/tweets/{tweet_id}')
def get_tweet(db: Session = Depends(get_db), tweet_id: str) -> Tweet:
    tweet = db.query(Tweet).filter(Tweet.id == tweet_id).first()
    if not tweet:
        raise HTTPException(status_code=404, detail="Tweet not found")
    return tweet

@router.post('/tweets/{tweet_id}/responses')
def generate_response(db: Session = Depends(get_db), tweet_id: str) -> Dict:
    # HUMAN ASSISTANCE NEEDED
    # This function needs more implementation details and error handling
    tweet = db.query(Tweet).filter(Tweet.id == tweet_id).first()
    if not tweet:
        raise HTTPException(status_code=404, detail="Tweet not found")
    
    llm_service = LLMService()
    response = llm_service.generate_response(tweet.content)
    
    # TODO: Store generated response in the database
    
    return {"response": response}